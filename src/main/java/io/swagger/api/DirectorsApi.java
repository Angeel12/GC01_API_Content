/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.63).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Director;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-17T11:17:33.178797818Z[GMT]")
@Validated
public interface DirectorsApi {

    @Operation(summary = "Add a new director", description = "Add a new director to the platform", tags={ "directors" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Director added successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Director.class))) })
    @RequestMapping(value = "/directors",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Director> addDirector(@Parameter(in = ParameterIn.DEFAULT, description = "The director to add", required=true, schema=@Schema()) @Valid @RequestBody Director body
);


    @Operation(summary = "Delete director", description = "Delete director by its ID", tags={ "directors" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Director deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "Director not found") })
    @RequestMapping(value = "/directors/{directorId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteDirector(@Parameter(in = ParameterIn.PATH, description = "The ID of the director to delete", required=true, schema=@Schema()) @PathVariable("directorId") Integer directorId
);


    @Operation(summary = "Get director details", description = "Get detailed information about a specific director", tags={ "directors" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Director details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Director.class))),
        
        @ApiResponse(responseCode = "404", description = "Director not found") })
    @RequestMapping(value = "/directors/{directorId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Director> getDirectorById(@Parameter(in = ParameterIn.PATH, description = "The ID of the director to retrieve", required=true, schema=@Schema()) @PathVariable("directorId") Integer directorId
);


    @Operation(summary = "Get a list of all directors", description = "Retrieve a list of all directors available in the platform", tags={ "directors" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of directors", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Director.class)))) })
    @RequestMapping(value = "/directors",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Director>> getDirectors();


    @Operation(summary = "Update director", description = "Update information about a specific director", tags={ "directors" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Director updated successfully"),
        
        @ApiResponse(responseCode = "404", description = "Director not found") })
    @RequestMapping(value = "/directors/{directorId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateDirector(@Parameter(in = ParameterIn.PATH, description = "The ID of the director to update", required=true, schema=@Schema()) @PathVariable("directorId") Integer directorId
, @Parameter(in = ParameterIn.DEFAULT, description = "The updated director data", required=true, schema=@Schema()) @Valid @RequestBody Director body
);

}

