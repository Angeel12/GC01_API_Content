/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.63).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Actor;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-17T11:17:33.178797818Z[GMT]")
@Validated
public interface ActorsApi {

    @Operation(summary = "Add a new actor", description = "Add a new actor to the platform", tags={ "actors" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Actor added successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Actor.class))) })
    @RequestMapping(value = "/actors",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Actor> addActor(@Parameter(in = ParameterIn.DEFAULT, description = "The actor to add", required=true, schema=@Schema()) @Valid @RequestBody Actor body
);


    @Operation(summary = "Delete actor", description = "Delete actor by its ID", tags={ "actors" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Actor deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "Actor not found") })
    @RequestMapping(value = "/actors/{actorId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteActor(@Parameter(in = ParameterIn.PATH, description = "The ID of the actor to delete", required=true, schema=@Schema()) @PathVariable("actorId") Integer actorId
);


    @Operation(summary = "Get actor details", description = "Get detailed information about a specific actor", tags={ "actors" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Actor details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Actor.class))),
        
        @ApiResponse(responseCode = "404", description = "Actor not found") })
    @RequestMapping(value = "/actors/{actorId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Actor> getActorById(@Parameter(in = ParameterIn.PATH, description = "The ID of the actor to retrieve", required=true, schema=@Schema()) @PathVariable("actorId") Integer actorId
);


    @Operation(summary = "Get a list of all actors", description = "Retrieve a list of all actors available in the platform", tags={ "actors" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of actors", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Actor.class)))) })
    @RequestMapping(value = "/actors",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Actor>> getActors();


    @Operation(summary = "Update actor", description = "Update information about a specific actor", tags={ "actors" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Actor updated successfully"),
        
        @ApiResponse(responseCode = "404", description = "Actor not found") })
    @RequestMapping(value = "/actors/{actorId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateActor(@Parameter(in = ParameterIn.PATH, description = "The ID of the actor to update", required=true, schema=@Schema()) @PathVariable("actorId") Integer actorId
, @Parameter(in = ParameterIn.DEFAULT, description = "The updated actor data", required=true, schema=@Schema()) @Valid @RequestBody Actor body
);

}

